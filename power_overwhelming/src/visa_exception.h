// <copyright file="visa_exception.h" company="Visualisierungsinstitut der Universität Stuttgart">
// Copyright © 2021 - 2025 Visualisierungsinstitut der Universität Stuttgart.
// Licensed under the MIT licence. See LICENCE file for details.
// </copyright>
// <author>Christoph Müller</author>

#if !defined(_PWROWG_VISA_EXCEPTION_H)
#define _PWROWG_VISA_EXCEPTION_H
#pragma once

#include <stdexcept>
#include <string>

#if defined(POWER_OVERWHELMING_WITH_VISA)
#include <visa.h>
#endif /*defined(POWER_OVERWHELMING_WITH_VISA) */

#include "visus/pwrowg/api.h"


PWROWG_DETAIL_NAMESPACE_BEGIN

/// <summary>
/// An error generated by the Virtual Instrument Software Architecture
/// (VISA). It represents a problem in an instrument like an oscilloscope.
/// </summary>
class visa_exception final : public std::runtime_error {

public:

    /// <summary>
    /// The native error type.
    /// </summary>
#if defined(POWER_OVERWHELMING_WITH_VISA)
    typedef ::ViStatus value_type;
#else /*defined(POWER_OVERWHELMING_WITH_VISA) */
    typedef int value_type;
#endif /*defined(POWER_OVERWHELMING_WITH_VISA) */

    /// <summary>
    /// If <paramref name="status" /> indicates a VISA error, throw a
    /// <see cref="visa_exception" />.
    /// </summary>
    /// <remarks>
    /// This method does nothing if the library is being compiled without
    /// VISA support.
    /// </remarks>
    /// <param name="status">The error code to be tested.</param>
    /// <exception cref="visa_exception">If the given status code
    /// represents an error state.</exception>
    static void throw_on_error(const value_type status);

    /// <summary>
    /// If <paramref name="status" /> indicates anything but success, throw
    /// a <see cref="visa_exception" />.
    /// </summary>
    /// <param name="status"></param>
    static void throw_unless_succeeded(const value_type status);

    /// <summary>
    /// Initialises a new instance.
    /// </summary>
    /// <param name="code">The error code, which also determines the error
    /// message.</param>
    visa_exception(const value_type code);

    /// <summary>
    /// Initialises a new instance.
    /// </summary>
    /// <param name="code">The error code.</param>
    /// <param name="message">A custom error message.</param>
    visa_exception(const value_type code, const char *message)
        : std::runtime_error(message), _code(code) { }

    /// <summary>
    /// Answer the native error code associated with the exception.
    /// </summary>
    /// <returns></returns>
    value_type code(void) const noexcept {
        return this->_code;
    }

private:

    value_type _code;
};

PWROWG_DETAIL_NAMESPACE_END

#endif /* !defined(_PWROWG_VISA_EXCEPTION_H) */
