// <copyright file="visa_exception.h" company="Visualisierungsinstitut der Universität Stuttgart">
// Copyright © 2021 Visualisierungsinstitut der Universität Stuttgart. Alle Rechte vorbehalten.
// </copyright>
// <author>Christoph Müller</author>

#pragma once

#include <exception>
#include <string>

#if defined(POWER_OVERWHELMING_WITH_VISA)
#include <visa.h>
#endif /*defined(POWER_OVERWHELMING_WITH_VISA) */


namespace visus {
namespace power_overwhelming {

    /// <summary>
    /// An error generated by the Virtual Instrument Software Architecture
    /// (VISA). It represents a problem in an instrument like an oscilloscope.
    /// </summary>
    class visa_exception final : public std::exception {

    public:

        /// <summary>
        /// The native error type.
        /// </summary>
#if defined(POWER_OVERWHELMING_WITH_VISA)
        typedef ::ViStatus value_type;
#else /*defined(POWER_OVERWHELMING_WITH_VISA) */
        typedef int value_type;
#endif /*defined(POWER_OVERWHELMING_WITH_VISA) */

        /// <summary>
        /// Initialises a new instance.
        /// </summary>
        /// <param name="code">The error code, which also determines the error
        /// message.</param>
        visa_exception(const value_type code);

        /// <summary>
        /// Initialises a new instance.
        /// </summary>
        /// <param name="code">The error code.</param>
        /// <param name="message">A custom error message.</param>
        visa_exception(const value_type code, const char *message)
            : std::exception(message), _code(code) { }

        /// <summary>
        /// Answer the native error code associated with the exception.
        /// </summary>
        /// <returns></returns>
        value_type code(void) const noexcept {
            return this->_code;
        }

    private:

        value_type _code;
    };

} /* namespace power_overwhelming */
} /* namespace visus */
